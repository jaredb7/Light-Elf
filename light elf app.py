#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.5 (standalone edition) on Mon Aug 27 11:28:11 2012

import wx, os, inspect, sys
from multiprocessing import Process, cpu_count, Queue
import  wx.lib.scrolledpanel as scrolled
import re

from lsptranslation import Sequence, xNetwork

# begin wxGlade: extracode
# end wxGlade


class LightingElf(wx.Frame):
    SEQUENCE_NAME = 'SN'
    SEQUENCE_FILE = 'SF'
    SEQUENCE_STATUS = 'SS'
    SEQUENCE_PROGRESS = 'SP'
    SEQUENCE_COMPLETE = 'SC'
    PROC_STATUS = 'PS'
    PROCESS = 'PRO'
    PROC_INQ = 'PIQ'
    PROC_OUTQ = 'POQ'
    PROC_STATQ = 'PSQ'
    PROC_INFO = 'PIF'
    PROC_XNET = 'XNET'

    sequences = []
    completeSeq = []

    def __init__(self, *args, **kwds):
        # begin wxGlade: LightingElf.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.maxProc = cpu_count() * 2
        self.activeProc = 0


        ico = wx.Icon('tree.ico',wx.BITMAP_TYPE_ICO)
        self.SetLabel("Lighting elf")
        self.SetIcon(ico)

        # Menu Bar
        self.menuBar = wx.MenuBar()
        fileMenu = wx.Menu()
        fileMenu.Append(101,"&Export Sequence","Export currently processed sequences.")
        fileMenu.AppendSeparator()
        fileMenu.Append(103,"E&xit", "Say good bye to the elf")
        self.menuBar.Append(fileMenu, "&File")
        seqMenu = wx.Menu()
        seqMenu.Append(201,"&Add Sequences", "Select LSP Sequences to convert")
        seqMenu.Append(202, "&Clear Sequences", "Delete current Sequences")
        self.menuBar.Append(seqMenu,"&Sequences")
        optionsMenu = wx.Menu()
        optionsMenu.Append(301,"Individual Sequence",
                           "Proces each sequence as an individual sequence.",
                           wx.ITEM_RADIO)
        optionsMenu.Append(302,"Combine Sequences",
                           "Combine all selected sequences into one seamless sequence",
                           wx.ITEM_RADIO )
        optionsMenu.AppendSeparator()
        optionsMenu.Append(303,"Settings", "Set directories used by the elf",
                           wx.ITEM_NORMAL)
        self.menuBar.Append(optionsMenu,"&Options")
        helpMenu = wx.Menu()
        helpMenu.Append(401, "About", "", wx.ITEM_NORMAL)
        self.menuBar.Append(helpMenu, "&Help")
        self.SetMenuBar(self.menuBar)
        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar(1, 0)
        self.sequencesPanel = scrolled.ScrolledPanel(self, -1,
                              style=wx.DOUBLE_BORDER | wx.TAB_TRAVERSAL)
        self.lbSequenceName = wx.StaticText(self.sequencesPanel, -1,
                            "Sequence Name                                                                          ",
                            style = wx.RAISED_BORDER | wx.ALL |
                            wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_LEFT,
                            size=(400,20)
                            )
        self.lbSequenceStatusText = wx.StaticText(self.sequencesPanel, -1, "Overall Status",
                                  style = wx.RAISED_BORDER,
                                  size=(100,20)
                                  )
        self.lbStatusGauge = wx.StaticText(self.sequencesPanel, -1, "Status Gauge",
                           style = wx.RAISED_BORDER,
                           size=(100,20)
                           )
        self.lbComplete = wx.StaticText(self.sequencesPanel, -1, "Complete",
                        style = wx.RAISED_BORDER,
                        size=(100,20))
        self.bAddFiles = wx.Button(self, -1, "Add Files")
        self.rbCombineFiles = wx.RadioButton(self, -1, "Combine Files")
        self.rbIndSeq = wx.RadioButton(self, -1, "Individual Sequence", style=wx.RB_GROUP)
        self.tcAudioFile = wx.TextCtrl(self, -1, "Multi Sequence Audio File", style=wx.TE_READONLY)
        self.bAddAudioFile = wx.Button(self, -1, "Add Audio File")
        self.label_9 = wx.StaticText(self, -1, "Output File Format")
##        self.label_8 = wx.StaticText(self, -1, "Available CPU Cores")
##        self.tcCores = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.rbXseqFile = wx.RadioButton(self, -1, "xLights xseq file", style=wx.RB_GROUP)
##        self.label_8_copy = wx.StaticText(self, -1, "Max Threads")
##        self.tcMaxThreads = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.rbConductorFile = wx.RadioButton(self, -1, "DLA Conductor file")

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.update, self.timer)

        if os.path.exists('C:\\xLights\\xlights_networks.xml'):
           self.netInfo = xNetwork()
        else:
            dlg = wx.MessageBox('xlights_network.xml file not found at C:\\xLights\\xlights_networks.xml'
                + ' if you already have a configured xlights network make sure options->xlights directory is '
                + 'is set properly' )
        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnAddFile, self.bAddFiles)
        # end wxGlade

    def update(self, timers):

        if len(self.sequences) != 0:
            for seq in self.sequences:
                if seq.has_key(self.PROCESS):
                    temp = seq[self.PROC_INFO]
                    try:
                        stat = temp[self.PROC_STATQ].get_nowait()
                    except:
                        continue
                    if stat == 'Done':
                        result = temp[self.PROC_OUTQ].get()
                        while not isinstance(result, Sequence):
                              try:
                                  result = temp[self.PROC_OUTQ].get()
                              except:
                                  seq[self.SEQUENCE_STATUS].ChangeValue('Error No Seq')
                                  return
                        self.activeProc -= 1
                    elif stat == "Error":
                         seq[self.SEQUENCE_STATUS].ChangeValue(stat)
                    elif re.match(r'Proc',stat,re.I) != None :
                        try:
                            cur = temp[self.PROC_OUTQ].get()
                            total = temp[self.PROC_OUTQ].get()
                            prog = int(cur/float(total) * 100)

                        except:
                            continue
                            pass
                        seq[self.SEQUENCE_PROGRESS].SetValue(prog)
                        seq[self.SEQUENCE_STATUS].ChangeValue(stat)
                    else:
                         seq[self.SEQUENCE_STATUS].ChangeValue(stat)
                elif self.activeProc < self.maxProc:
                    self.activeProc +=1
                    temp =  seq[self.PROC_INFO]
                    temp[self.PROC_INQ] = Queue()
                    temp[self.PROC_OUTQ] = Queue()
                    temp[self.PROC_STATQ] = Queue()
                    temp[self.PROC_XNET] = self.netInfo
                    seq[self.PROCESS] = Process(target=seqWorker,kwargs=temp)
                    seq[self.PROCESS].start()
        self.Refresh()
        self.Layout()


    def __set_properties(self):
        # begin wxGlade: LightingElf.__set_properties
        self.SetBackgroundColour(wx.Colour(240, 240, 240))
        self.frame_1_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_1_statusbar_fields = [""]
        for i in range(len(frame_1_statusbar_fields)):
            self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
        self.sequencesPanel.SetScrollRate(10, 10)
        self.tcAudioFile.SetMinSize((500, -1))
        self.tcAudioFile.Enable(False)
##        self.tcCores.Enable(False)
##        self.tcMaxThreads.Enable(False)
        self.bAddAudioFile.Enable(False)
        self.label_9.SetMinSize((200,29))
        # end wxGlade


    def __do_layout(self):
        # begin wxGlade: LightingElf.__do_layout
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2 = wx.FlexGridSizer(3, 3, 1, 1)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(1, 4, 1, 1)
        grid_sizer_1.Add(self.lbSequenceName, 0, wx.ALL, 3)
        grid_sizer_1.Add(self.lbSequenceStatusText, 0, wx.ALL, 3)
        grid_sizer_1.Add(self.lbStatusGauge, 0, wx.ALL, 3)
        grid_sizer_1.Add(self.lbComplete, 0, wx.ALL, 3)
        self.sequencesPanel.SetSizer(grid_sizer_1)
        sizer_12.Add(self.sequencesPanel, 1, wx.EXPAND, 0)
        sizer_14.Add(self.bAddFiles, 0, wx.LEFT, 10)
        sizer_14.Add(self.rbCombineFiles, 0, wx.LEFT | wx.TOP, 10)
        sizer_14.Add(self.rbIndSeq, 0, wx.LEFT | wx.TOP, 10)
        sizer_12.Add(sizer_14, 0, wx.EXPAND, 0)
        sizer_11.Add(sizer_12, 1, wx.EXPAND, 0)
        grid_sizer_2.Add(self.tcAudioFile, 0, wx.ALL | wx.EXPAND, 3)
        grid_sizer_2.Add(self.bAddAudioFile, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.label_9, 0, wx.ALL | wx.EXPAND, 3)
##        grid_sizer_2.Add(self.label_8, 0, wx.ALL, 3)
##        grid_sizer_2.Add(self.tcCores, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.rbXseqFile, 0, wx.ALL, 3)
##        grid_sizer_2.Add(self.label_8_copy, 0, wx.ALL, 3)
##        grid_sizer_2.Add(self.tcMaxThreads, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.rbConductorFile, 0, wx.ALL, 3)
        sizer_11.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_10.Add(sizer_11, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_10)
        sizer_10.Fit(self)
        self.Layout()
        # end wxGlade

    def OnAddFile(self, event):  # wxGlade: LightingElf.<event_handler>
        """
        Create and show the Open FileDialog
        """

        dlg = wx.FileDialog(
            self, message="Select LSP Sequences to Convert",
            defaultFile="",
            defaultDir="C:\\xlights",
            wildcard='*.msq',
            style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
            )
        if dlg.ShowModal() == wx.ID_OK:
            grid = self.sequencesPanel.GetSizer()
            paths = dlg.GetPaths()

            for path in paths:
                grid = self.sequencesPanel.GetSizer()
                grid.SetRows(grid.GetRows())
                self.sequences.append({})
                tempDict = self.sequences[-1]
                tempDict[self.PROC_INFO] = {}
                procDict = tempDict[self.PROC_INFO]
                procDict[self.SEQUENCE_FILE] = path
                tempDict[self.SEQUENCE_NAME] = wx.TextCtrl(
                                                       self.sequencesPanel, -1, path)
                tempDict[self.SEQUENCE_STATUS] = wx.TextCtrl(self.sequencesPanel, -1, "waiting")
                tempDict[self.SEQUENCE_PROGRESS] = wx.Gauge(self.sequencesPanel, -1, 100)
                tempDict[self.SEQUENCE_COMPLETE] = wx.StaticBitmap(self.sequencesPanel, -1,
                              wx.Bitmap("notchecked.ico", wx.BITMAP_TYPE_ANY))
                grid.Add(tempDict[self.SEQUENCE_NAME], 0, wx.ALL | wx.EXPAND, 3)
                grid.Add(tempDict[self.SEQUENCE_STATUS], 0, wx.ALL, 3)
                grid.Add(tempDict[self.SEQUENCE_PROGRESS], 0, wx.ALL, 3)
                grid.Add(tempDict[self.SEQUENCE_COMPLETE], 0, 0, 0)

                print path
            self.numSequences = len(paths)
            self.timer.Start(500)
            self.bAddFiles.Disable()

        dlg.Destroy()
        self.sequencesPanel.SetSizer(self.sequencesPanel.GetSizer())
        self.sequencesPanel.SetAutoLayout(1)
        self.sequencesPanel.SetupScrolling()

        self.Refresh()
        self.Layout()

def seqWorker(**kwargs):
    procInfo = kwargs

    xSeq = Sequence(procInfo[LightingElf.SEQUENCE_FILE],
                    procInfo[LightingElf.PROC_XNET])

    procInfo[LightingElf.PROC_STATQ].put('Extracting')
    if xSeq.extractSequence() == 1:
       procInfo[LightingElf.PROC_STATQ].put('error')
       exit

    procInfo[LightingElf.PROC_STATQ].put('Analyzing')
    xSeq.procSequence()

    dots = "."
    for (cur,total) in xSeq.convertLSPSequenceWStatus():
        dots = "." if len(dots) > 4 else dots + "."
        try:
            procInfo[LightingElf.PROC_STATQ].put_nowait('Processing'+dots)
            procInfo[LightingElf.PROC_OUTQ].put_nowait(cur)
            procInfo[LightingElf.PROC_OUTQ].put_nowait(total)
        except:
            pass

    try:
        procInfo[LightingElf.PROC_STATQ].put_nowait('Done')
        procInfo[LightingElf.PROC_OUTQ].put_nowait(xSeq)
    except:
        pass







# end of class LightingElf
if __name__ == "__main__":
    print os.path.realpath(__file__)
    app = wx.PySimpleApp(0)

    wx.InitAllImageHandlers()
    frame_1 = LightingElf(None, -1, "Lighting Elf")
    app.SetTopWindow(frame_1)
##    frame_1.tcCores.AppendText(str(cpu_count()))
    frame_1.Show()
    app.MainLoop()
