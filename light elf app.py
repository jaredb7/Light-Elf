#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.5 (standalone edition) on Mon Aug 27 11:28:11 2012

import wx, os
from multiprocessing import Process, cpu_count
import  wx.lib.scrolledpanel as scrolled

# begin wxGlade: extracode
# end wxGlade


class LightingElf(wx.Frame):
    SEQUENCE_NAME = 'SN'
    SEQUENCE_FILE = 'SF'
    SEQUENCE_STATUS = 'SS'
    SEQUENCE_PROGRESS = 'SP'
    SEQUENCE_COMPLETE = 'SC'
    sequences = []

    def __init__(self, *args, **kwds):
        # begin wxGlade: LightingElf.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.frame_1_menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.NewId(), "about", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "&Help")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar(1, 0)
        self.sequencesPanel = scrolled.ScrolledPanel(self, -1,
                              style=wx.DOUBLE_BORDER | wx.TAB_TRAVERSAL,
                              size=(750,100))
        self.lbSequenceName = wx.StaticText(self.sequencesPanel, -1,
                            "Sequence Name                                                                          ",
                            style = wx.RAISED_BORDER | wx.ALL |
                            wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_LEFT,
                            size=(400,20)
                            )
        self.lbSequenceStatusText = wx.StaticText(self.sequencesPanel, -1, "Overall Status",
                                  style = wx.RAISED_BORDER,
                                  size=(100,20)
                                  )
        self.lbStatusGauge = wx.StaticText(self.sequencesPanel, -1, "Status Gauge",
                           style = wx.RAISED_BORDER,
                           size=(100,20)
                           )
        self.lbComplete = wx.StaticText(self.sequencesPanel, -1, "Complete",
                        style = wx.RAISED_BORDER,
                        size=(100,20))
        self.bAddFiles = wx.Button(self, -1, "Add Files")
        self.rbCombineFiles = wx.RadioButton(self, -1, "Combine Files")
        self.rbIndSeq = wx.RadioButton(self, -1, "Individual Sequence", style=wx.RB_GROUP)
        self.tcAudioFile = wx.TextCtrl(self, -1, "Multi Sequence Audio File", style=wx.TE_READONLY)
        self.bAddAudioFile = wx.Button(self, -1, "Add Audio File")
        self.label_9 = wx.StaticText(self, -1, "Output File Format")
        self.label_8 = wx.StaticText(self, -1, "Available CPU Cores")
        self.tcCores = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.rbXseqFile = wx.RadioButton(self, -1, "xLights xseq file", style=wx.RB_GROUP)
        self.label_8_copy = wx.StaticText(self, -1, "Max Threads")
        self.tcMaxThreads = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.rbConductorFile = wx.RadioButton(self, -1, "DLA Conductor file")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnAddFile, self.bAddFiles)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: LightingElf.__set_properties
        self.SetTitle("frame_1")
        self.SetBackgroundColour(wx.Colour(240, 240, 240))
        self.frame_1_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_1_statusbar_fields = ["frame_1_statusbar"]
        for i in range(len(frame_1_statusbar_fields)):
            self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
        self.sequencesPanel.SetScrollRate(10, 10)
        self.tcAudioFile.SetMinSize((500, -1))
        self.tcAudioFile.Enable(False)
        self.tcCores.Enable(False)
        self.tcMaxThreads.Enable(False)
        self.bAddAudioFile.Enable(False)
        self.label_9.SetMinSize((200,29))
        # end wxGlade


    def __do_layout(self):
        # begin wxGlade: LightingElf.__do_layout
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2 = wx.FlexGridSizer(3, 3, 1, 1)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(1, 4, 1, 1)
        grid_sizer_1.Add(self.lbSequenceName, 0, wx.ALL, 3)
        grid_sizer_1.Add(self.lbSequenceStatusText, 0, wx.ALL, 3)
        grid_sizer_1.Add(self.lbStatusGauge, 0, wx.ALL, 3)
        grid_sizer_1.Add(self.lbComplete, 0, wx.ALL, 3)
        self.sequencesPanel.SetSizer(grid_sizer_1)
        sizer_12.Add(self.sequencesPanel, 1, wx.EXPAND, 0)
        sizer_14.Add(self.bAddFiles, 0, wx.LEFT, 10)
        sizer_14.Add(self.rbCombineFiles, 0, wx.LEFT | wx.TOP, 10)
        sizer_14.Add(self.rbIndSeq, 0, wx.LEFT | wx.TOP, 10)
        sizer_12.Add(sizer_14, 0, wx.EXPAND, 0)
        sizer_11.Add(sizer_12, 1, wx.EXPAND, 0)
        grid_sizer_2.Add(self.tcAudioFile, 0, wx.ALL | wx.EXPAND, 3)
        grid_sizer_2.Add(self.bAddAudioFile, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.label_9, 0, wx.ALL | wx.EXPAND, 3)
        grid_sizer_2.Add(self.label_8, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.tcCores, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.rbXseqFile, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.label_8_copy, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.tcMaxThreads, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.rbConductorFile, 0, wx.ALL, 3)
        sizer_11.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_10.Add(sizer_11, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_10)
        sizer_10.Fit(self)
        self.Layout()
        # end wxGlade

    def OnAddFile(self, event):  # wxGlade: LightingElf.<event_handler>
        """
        Create and show the Open FileDialog
        """
        dlg = wx.FileDialog(
            self, message="Select LSP Sequences to Convert",
            defaultFile="",
            defaultDir="C:\\xlights",
            wildcard='*.msq',
            style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
            )
        if dlg.ShowModal() == wx.ID_OK:
            grid = self.sequencesPanel.GetSizer()
            paths = dlg.GetPaths()

            for path in paths:
                grid = self.sequencesPanel.GetSizer()
                grid.SetRows(grid.GetRows())
                self.sequences.append({})
                tempDict = self.sequences[-1]
                tempDict[self.SEQUENCE_FILE] = path
                tempDict[self.SEQUENCE_NAME] = wx.TextCtrl(
                                                       self.sequencesPanel, -1, path)
                tempDict[self.SEQUENCE_STATUS] = wx.TextCtrl(self.sequencesPanel, -1, "waiting")
                tempDict[self.SEQUENCE_PROGRESS] = wx.Gauge(self.sequencesPanel, -1, 10)
                tempDict[self.SEQUENCE_COMPLETE] = wx.StaticBitmap(self.sequencesPanel, -1,
                              wx.Bitmap("notchecked.ico", wx.BITMAP_TYPE_ANY))
                grid.Add(tempDict[self.SEQUENCE_NAME], 0, wx.ALL | wx.EXPAND, 3)
                grid.Add(tempDict[self.SEQUENCE_STATUS], 0, wx.ALL, 3)
                grid.Add(tempDict[self.SEQUENCE_PROGRESS], 0, wx.ALL, 3)
                grid.Add(tempDict[self.SEQUENCE_COMPLETE], 0, 0, 0)

                print path

        print os.getcwd()

        dlg.Destroy()
        self.sequencesPanel.SetSizer(self.sequencesPanel.GetSizer())
        self.sequencesPanel.SetAutoLayout(1)
        self.sequencesPanel.SetupScrolling()

        self.Refresh()
        self.Layout()



# end of class LightingElf
if __name__ == "__main__":
    app = wx.PySimpleApp(0)

    wx.InitAllImageHandlers()
    frame_1 = LightingElf(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.tcCores.AppendText(str(cpu_count()))
    frame_1.Show()
    app.MainLoop()
